# Generated by Django 3.2 on 2024-01-13 02:13

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import myapp.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=255, validators=[myapp.validators.validate_letters, myapp.validators.validate_first_letter], verbose_name='First Name')),
                ('last_name', models.CharField(max_length=255, validators=[myapp.validators.validate_letters, myapp.validators.validate_first_letter], verbose_name='Last Name')),
                ('document', models.CharField(max_length=14, unique=True, verbose_name='Document')),
                ('balance', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Balance')),
                ('user_type', models.CharField(choices=[['M', 'Merchant'], ['C', 'Common']], default='C', max_length=1, validators=[myapp.validators.validate_first_letter], verbose_name='User Type')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'CustomUser',
                'verbose_name_plural': 'CustomUsers',
                'ordering': ['id'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[myapp.validators.validate_value], verbose_name='Transaction Amount')),
                ('transaction_date', models.DateTimeField(auto_now_add=True, validators=[myapp.validators.validate_date, myapp.validators.validate_time], verbose_name='Date and Time')),
                ('payee', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='payee_transactions', to=settings.AUTH_USER_MODEL, verbose_name='Transaction Payee')),
                ('payer', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='payer_transactions', to=settings.AUTH_USER_MODEL, verbose_name='Transaction Payer')),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
                'ordering': ['id'],
            },
        ),
    ]
